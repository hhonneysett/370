@using System.Web.Optimization
@model LibraryAssistantApp.Models.EmployeeEditModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3>Update Employee</h3>
<hr />
<h5>Update employee details below</h5>
<br />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="form-group">
            @Html.LabelFor(model => model.person_id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.person_id, new { htmlAttributes = new { @class = "form-control", @disabled = true } })
                @Html.ValidationMessageFor(model => model.person_id, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.person_name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.person_name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.person_name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.person_surname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.person_surname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.person_surname, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.person_email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.person_email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.person_email, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="btn-reset" type="button" value="Reset Password" class="btn btn-default" />
            </div>
        </div>
        
        <h5>Employee Roles:</h5>
        <br />
        <div class="row">
            <div class="col-md-4 col-md-offset-2">
                <div class="panel panel-default">
                    <table class="table" id="emp-roles">
                        <thead>
                            <tr>
                                <th>
                                    Role
                                </th>
                                <th>
                                    Select
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.emprolecheckeditlist.Count(); ++i)
                            {
                                <tr id="@Model.emprolecheckeditlist[i].role_id">
                                    @Html.HiddenFor(m => m.emprolecheckeditlist[i].role_id)
                                    <td>
                                        @Html.DisplayFor(m => m.emprolecheckeditlist[i].role_name)
                                    </td>
                                    <td>
                                        @Html.CheckBoxFor(m => m.emprolecheckeditlist[i].role_ind, htmlAttributes: new { @class = @Model.emprolecheckeditlist[i].role_id })
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div id="topics" hidden="@TempData["Check1"]">
            <h5>Trainer Topics:</h5>
            <div class="col-md-4 col-md-offset-2">
                <div class="row" style="padding-bottom:15px">
                    <div class="col-md-offset-1">
                        <div class="input-group">
                            <span class="input-group-addon">
                                <input type="checkbox" class="topics-cb" />
                            </span>
                            <select id="categoryList" class="form-control">
                                <option selected>All Topics</option>
                                @foreach (var item in ViewBag.Categories)
                                {
                                    <option id="@item.Value">@item.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div id="category-div">
                    @{Html.RenderPartial("Categories_edit", Model);}
                </div>
            </div>
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="btn-submit" type="submit" value="Save Changes" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section script {
    <script src="~/Scripts/bootbox.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#emp-roles tbody tr').click(function () {
                $('#emp-roles tr').removeClass('selectedrow');
                $(this).addClass('selectedrow');
                var a = $(this).attr('id');
                $.ajax({
                    type: 'GET',
                    data: { id: a },
                    url: '@Url.Action("GetActions", "Employee")',
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    success: function (result) {
                        $('#div-emp-actions').html(result);
                    }
                }).done(function () {
                    $('.loading').hide();
                });
            });

            $('#emp-roles tbody tr').click(function () {
                var z = $(this).attr('id');
                if (z == 7) {
                    if ($('input', this).is(':checked')) {
                        $('#topics').show();
                    } else {
                        $('#topics').hide();
                    }
                };
            });

            $('#btn-reset').click(function () {
                bootbox.confirm({
                    title: "Reset Password?",
                    message: "Are you sure you want to reset the password?",
                    buttons: {
                        cancel: {
                            label: '<i class="fa fa-times"></i> Cancel'
                        },
                        confirm: {
                            label: '<i class="fa fa-check"></i> Confirm'
                        }
                    },
                    callback: function (result) {
                        if (result == true)
                        {
                            var b = '@Model.person_id';
                            var e = '@Model.person_email';
                            var n = noty({
                                layout: 'topRight',
                                text: 'Password reset successful. New password has been sent to the email on record for this employee.',
                                type: 'success',
                                animation: {
                                    open: { height: 'toggle' },
                                    close: { height: 'toggle' },
                                    easing: 'swing',
                                    speed: 500
                                },
                                timeout: 5000,
                            });
                            $.ajax({
                                type: 'GET',
                                data: { id: b, _email: e },
                                url: '@Url.Action("ResetPassword", "Employee")',
                                beforeSend: function () {
                                    $('.loading').show();
                                },
                            }).done(function () {
                                $('.loading').hide();
                            });
                        } else {

                        }
                    }
                });
            });
            //filter by category
            $('#categoryList').change(function () {
                $('.topics-cb').prop('checked', false);
                var myArray = new Array();
                $('#category-div input:checkbox').each(function () {
                    var seq = $(this).attr('class');
                    var ind = "";
                    if ($(this).is(':checked')) {
                        ind = "True";
                    } else {
                        ind = "False";
                    }
                    myArray.push({ topic_seq: seq, topic_ind: ind });
                });

                var a = "";
                var a = $(this).children(':selected').attr('id');
                $.ajax({
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {
                        cat_id : JSON.stringify(a),
                        arr : JSON.stringify(myArray)
                    },
                    url: '@Url.Action("Categories_edit", "Employee")',
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    success: function (result) {
                        $('#category-div').html(result);
                        console.log(result);
                    }
                }).done(function () {
                    $('.loading').hide();
                });
            });
            //submit the update form
            $('#btn-submit').click(function (event) {
                event.preventDefault();
                var roleArray = new Array();
                var myArray = new Array();
                $('#emp-roles input:checkbox').each(function () {
                    var seq = $(this).attr('class');
                    var ind = "";
                    if ($(this).is(':checked')) {
                        ind = "True";
                    } else {
                        ind = "False";
                    }
                    roleArray.push({ role_id: seq, role_ind: ind });
                });
                $('#category-div input:checkbox').each(function () {
                    var seq = $(this).attr('class');
                    var ind = "";
                    if ($(this).is(':checked')) {
                        ind = "True";
                    } else {
                        ind = "False";
                    }
                    myArray.push({ topic_seq: seq, topic_ind: ind });
                });
                var a = $('#person_id').val();
                var b = $('#person_name').val();
                var c = $('#person_surname').val();
                var d = $('#person_email').val();
                $.ajax({
                    type: 'GET',
                    contentType: 'application/json; charset=utf-8',
                    data: {
                        id: JSON.stringify(a),
                        name: JSON.stringify(b),
                        surname: JSON.stringify(c),
                        email: JSON.stringify(d),
                        arr: JSON.stringify(myArray),
                        rolearr: JSON.stringify(roleArray)
                    },
                    url: '@Url.Action("saveTopics", "Employee")',
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    success: function (result) {
                        bootbox.alert({
                            message: "Employee was updated successfully.",
                            size: 'small',
                            callback: function () {
                                window.location.href = "/Employee/Index";
                            }
                        });
                    }
                }).done(function () {
                    $('.loading').hide();
                });
            });
            $('.topics-cb').click(function () {
                if ($(this).is(":checked"))
                    $('#category-div input:checkbox').each(function () {
                        $(this).prop('checked', true);
                    })
                else
                    $('#category-div input:checkbox').each(function () {
                        $(this).prop('checked', false);
                    })
            });
        });
    </script>
}