@using LibraryAssistantApp.Models

@{
    ViewBag.Title = "Manage Training Sessions";
    var Campus = (IEnumerable<Campus>)ViewBag.Campus;
}

<h2>Manage Training Sessions</h2>
<h4 class="bg-info shaded">Training Sessions Calendar View:</h4>
<hr />

<form id="manageTraining">
    <div class="row">
        <div class="col-md-12">
            <p class="text-muted"><b>Note:</b> Select a training session booking from the calendar to access further options.</p>
        </div>
        <div class="col-md-8">            
            <h4 class="bg-warning shaded">Existing Training Sessions:</h4>
            <div id="existingTraining" class="panel panel-default">
                <div class="panel-body">

                    <div class="col-md-12">
                        <div class="form-group col-md-6">
                            <div class="col-md-4">
                                <text class="control-label"><b>Campus:</b></text>
                            </div>
                            <div class="col-md-8">
                                <select id="manageCampusSelect" class="form-control col-md-4" title="Filter training sessions by campus.">
                                    <option disabled selected value="0">--select a campus--</option>
                                    @foreach (var campus in Campus)
                                    {
                                        <option value="@campus.Campus_ID">@campus.Campus_Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="form-group col-md-6">
                            <div class="col-md-4">
                                <text class="control-label"><b>Username:</b></text>
                            </div>
                            <div class="col-md-8">
                                <input type="text" class="form-control" id="trainerID" placeholder="Enter username" name="trainerID" title="Enter username of person who made the booking.">
                                <input type="button" value="Submit" id="btnTrainerID" class="btn btn-primary" style="margin-top: 15px" title="Filter training sessions by username."/>
                            </div>
                        </div>
                    </div>

                    <div id="calendar">
                        <div id="scheduler_here" class="dhx_cal_container col-md-12" style='height:450px;'>
                            <div class="dhx_cal_navline">
                                <div class="dhx_cal_prev_button">&nbsp;</div>
                                <div class="dhx_cal_next_button">&nbsp;</div>
                                <div class="dhx_cal_today_button"></div>
                                <div class="dhx_cal_date"></div>
                                <div class="dhx_cal_tab" name="day_tab" style="right:204px;"></div>
                                <div class="dhx_cal_tab" name="week_tab" style="right:140px;"></div>
                                <div class="dhx_cal_tab" name="month_tab" style="right:76px;"></div>
                                <div class="dhx_cal_tab" name="agenda_tab" style="right:280px;"></div>
                            </div>
                            <div class="dhx_cal_header"></div>
                            <div class="dhx_cal_data"></div>
                        </div>
                    </div>

                </div>
            </div>
        </div>

        <div class="col-md-4" id="trainingDetails" >
            <h4 class="bg-warning shaded">Training Session Details:</h4>
            <div class="panel panel-default">
                <div class="panel-body">
                    <h4 class="text-center">No Training Session Selected</h4>
                </div>
            </div>
        </div>
    </div>
</form>

<div id="loading" hidden></div>

<div id="cancelConfirm"></div>

<script type="text/javascript">
    $(document).ready(function () {
        scheduler.init('scheduler_here', new Date(), "month");

        //check inputted person id is an employee person id
        jQuery.validator.addMethod("validTrainerID", function (value, element) {
            var regex = /^[p][0-9]{8}$/;
            return this.optional(element) || regex.test(value);
        }, "Invalid person ID");

        //validate student id
        jQuery.validator.addMethod("validStudentID", function (value, element) {
            var regex = /^[u][0-9]{8}$/;
            return this.optional(element) || regex.test(value);
        }, "You have entered an invalid studnet number");

        //initiate validation
        $("#manageTraining").validate({
            rules: {
                trainerID: {
                    validTrainerID: true,
                    required: true,
                }
            },
            errorClass: "my-error-class",
        })

        //show calendar for trainer
        $("#btnTrainerID").click(function () {
            if ($("#manageTraining").valid()) {
                manageTrainingCalendar($("#trainerID").val())
                $('#manageCampusSelect').prop('value', 0);
            }
        })

        //show calendar for campus
        $("#manageCampusSelect").change(function () {
            manageTrainingCalendar($(manageCampusSelect).children(":selected").attr("value"))
        })

        //show calendar for training sessions
        function manageTrainingCalendar(id) {
            $.ajax({
                type: 'GET',
                url: '/Trainer/getTrainingSessions',
                data: "id=" + id,
                success: function (result) {

                    //clear the calendar
                    scheduler.clearAll();

                    //configure the calendar
                    scheduler.config.resize_month_events = false;
                    scheduler.config.first_hour = 8;
                    scheduler.config.last_hour = 17;
                    scheduler.config.start_on_monday = true;
                    scheduler.locale.labels.agenda_tab = "Agenda";
                    scheduler.config.readonly = true;

                    //initialize the scheduler
                    scheduler.init('scheduler_here', new Date(), "month");

                    //create an events json object
                    var events = [];

                    //go through list of events and add each event to the json events object
                    result.forEach(function (entry) {

                        //create an event for each booking
                        var event = {
                            id: entry.id,
                            text: entry.text,
                            start_date: moment(entry.start_date).format('MM[/]DD[/]YYYY h:mm:ss'),
                            end_date: moment(entry.end_date).format('MM[/]DD[/]YYYY h:mm:ss'),
                        }


                        //adds the event to the events object
                        events.push(event);
                    });

                    //passes the events to the scheduler
                    scheduler.parse(events, "json"); //takes the name and format of the data source

                    //make events clickable
                    scheduler.attachEvent("onClick", function (id, e) {
                        //any custom logic here
                        showTrainingDetails(id);
                    });

                },
                error: function (err, result) {
                    alert("Unfortunately, something went wrong, please contact IT support for further assistance. Have a nice day!");
                }
            });
        }

        //show popup of details
        function showTrainingDetails(id) {
            $.ajax({
                type: 'GET',
                url: '/Trainer/trainingSessionDetails',
                data: { id: id },
                success: function (result) {

                    $('#trainingDetails').show(1100);
                    $('#trainingDetails').replaceWith(result);
                    $("#btnGenerateAttendance").click(function () {
                        getRegister();
                    })

                    $("#cancelTraining").click(function () {
                        $("#cancelConfirm").dialog({
                            autoOpen: true,
                            position: {
                                my: "center",
                                at: "top+350",
                                of: window
                            },
                            width: 600,
                            resizable: false,
                            title: 'Cancel Confirmation:',
                            modal: true,
                            open: function () {
                                var markup = 'Are you sure you want to cancel this training session?';
                                $(this).html(markup);
                            },
                            buttons: {
                                "Confirm": function () {
                                    cancelTraining();
                                },
                                Cancel: function () {
                                    $(this).dialog("close");
                                }
                            }
                        });
                    });
                },
                error: function (err, result) {
                    alert("Error in assigning dataToSave" + err.responseText);
                }
            });
        }

        //cancel training
        function cancelTraining() {
            $.ajax({
                type: 'post',
                url: '/Trainer/cancelTraining',
                success: function (result) {
                    window.location.href = "/Trainer/manageTrainingSession";
                },
                error: function (err, result) {
                    alert("Unfortunately, something went wrong, please contact IT support for further assistance. Have a nice day!");
                }
            });
        }

        //laoding div
        var $loading = $('#loading').hide();
        $(document)
          .ajaxStart(function () {
              $loading.show();
          })
          .ajaxStop(function () {
              $loading.hide();
          });

        //loading div
        var opts = {
            lines: 13 // The number of lines to draw
        , length: 28 // The length of each line
        , width: 14 // The line thickness
        , radius: 42 // The radius of the inner circle
        , scale: 0.3 // Scales overall size of the spinner
        , corners: 1 // Corner roundness (0..1)
        , color: '#000' // #rgb or #rrggbb or array of colors
        , opacity: 0.25 // Opacity of the lines
        , rotate: 0 // The rotation offset
        , direction: 1 // 1: clockwise, -1: counterclockwise
        , speed: 1 // Rounds per second
        , trail: 60 // Afterglow percentage
        , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
        , zIndex: 2e9 // The z-index (defaults to 2000000000)
        , className: 'spinner' // The CSS class to assign to the spinner
        , top: '50%' // Top position relative to parent
        , left: '50%' // Left position relative to parent
        , shadow: false // Whether to render a shadow
        , hwaccel: false // Whether to use hardware acceleration
        , position: 'absolute' // Element positioning
        }
        var target = document.getElementById('loading')
        var spinner = new Spinner(opts).spin(target);
    })
</script>
