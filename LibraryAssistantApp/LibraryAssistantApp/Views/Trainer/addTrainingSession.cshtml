@model LibraryAssistantApp.Models.TrainingSessionModel
@using LibraryAssistantApp.Models

@{
    ViewBag.Title = "Add Training Session";
    var categories = (IEnumerable<Category>)ViewBag.Categories;
    var campuses = (IEnumerable<Campus>)ViewBag.Campuses;
    var characteristics = (IEnumerable<Characteristic>)ViewBag.Characteristics;
}

<h2>Create Training Session</h2>

@Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />

    <form id="details">
        <div id="detailsTop"><span id="arrow" class="glyphicon glyphicon-triangle-bottom"></span><b>Training Session Details:</b></div>
        <hr />
        <div class="row" id="toggleMain">
            <div class="col-md-6">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Category_ID, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select name="category" id="categorySelect" class="form-control">
                            <option disabled selected value>-- select a category --</option>
                            @foreach (var category in categories)
                            {
                                <option value="@category.Category_ID">@category.Category_Name</option>
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.Category_ID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Topic_ID, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select name="topic" class="form-control" id="topicSelect"></select>
                        @Html.ValidationMessageFor(model => model.Topic_ID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.startDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="text" id="datepicker" name="date" class="form-control" placeholder="Select Date" />
                        @Html.ValidationMessageFor(model => model.startDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.duration, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select name="duration" id="durationSelect" class="form-control">
                            <option disabled selected value>-- select duration --</option>
                            <option value="60">01h:00</option>
                            <option value="120">02h:00</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.duration, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Campus_ID, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select name="campus" id="campusSelect" class="form-control">
                            <option disabled selected value>-- select a campus --</option>
                            @foreach (var campus in campuses)
                            {
                                <option value="@campus.Campus_ID">@campus.Campus_Name</option>
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.Campus_ID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Proceed" class="btn btn-default" id="btnSubmit" />
                    </div>
                </div>
            </div>

            <div class="col-md-3 col-sm-6 col-xs-9">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        Characteristics
                    </div>
                    <div class="panel-body">
                        <ul class="list-group">
                            @foreach (var characteristic in characteristics)
                            {
                                <li class="list-group-item no-border">
                                    <span class="pull-right"><input type="checkbox" class="Characteristic_ID" value="@characteristic.Characteristic_ID"></span> @characteristic.Characteristic_Name
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </form>

    <div class="row" id="venueContent">
        <div id="availableVenues"></div>
    </div>

    <div class="row">
        <div class="row" id="sessiondetails"></div>
    </div>

    <div id="additionalDetails"></div>
</div>

<script type="text/javascript">
    $(document).ready(function () {

        //add a custom validation rule to validate date
        jQuery.validator.addMethod("validDateCheck", function (value, element) {
            var date_regex = /^(0[1-9]|1[0-2])\/(0[1-9]|1\d|2\d|3[01])\/(19|20)\d{2}$/;
            return this.optional(element) || date_regex.test(value)
        });

        //check date isnt in the past
        jQuery.validator.addMethod("datePastCheck", function (value, element) {
            var convertDate = new Date(value);
            var now = new Date();
            if (convertDate < now) {
                return this.optional(element) || false;
            }
            else {
                return this.optional(element) || true;
            }
        }, "Date already taken place");

        //initiate validation
        $("#details").validate({
            rules: {
                category: "required",
                topic: "required",
                date: {
                    required: true,
                    validDateCheck: true,
                    datePastCheck: true,
                },
                duration: "required",
                campus: "required",
            },
            messages: {
                category: "Please provide a category selection",
                topic: "Please provide a topic selection",
                duration: "Please provide a duration selection",
                campus: "Please provide a campus selection",
            },
            errorClass: "my-error-class",
        });

        //toggle details when clicked
        $("#detailsTop").click(function () {
            $("#toggleMain").show(800);
            if ($("#detailsTop span").hasClass("glyphicon glyphicon-triangle-right")) {
                $("#detailsTop span").removeClass("glyphicon glyphicon-triangle-right");
                $("#detailsTop span").addClass("glyphicon glyphicon-triangle-bottom");
            } else {
                $("#detailsTop span").removeClass("glyphicon glyphicon-triangle-bottom");
                $("#detailsTop span").addClass("glyphicon glyphicon-triangle-right");
            }
        });

        //disable the create button and topic select on form load
        $("#topicSelect").attr('disabled', true);

        //call a function on a table row click to capture the selected venue
        $(document).on('click', "#venueTable tbody tr", function () {
            var selected = $(this).hasClass("alert-info");
            $("#venueTable tbody tr").removeClass("alert-info");

            if (!selected) {
                $(this).addClass("alert-info");
            }
            var buttonEnabled = $(this).hasClass("alert-info");
            if (buttonEnabled) {
                $("#btnProceed").prop('disabled', false)
            } else {
                $("#btnProceed").prop('disabled', true)
            }
        });

        //show mathcing topics for selected category
        $("#categorySelect").change(function () {
            var id = $("#categorySelect").children(":selected").val();
            $.ajax({
                type: 'GET',
                url: '/Trainer/getCatTopic',
                data: {
                    id: id
                },
                success: function (result) {
                    var options = $("#topicSelect");

                    //remove existing options from the select to add new options
                    options.children().remove();

                    options.append($("<option disabled selected value />").text("-- select topic --"));

                    if (result.length == 0) {
                        options.children().remove();
                        options.append($("<option disabled selected value />").text("-- no topics --"));
                    }

                    //add an option to the select for each building
                    result.forEach(function (entry) {
                        options.append($("<option />").val(entry.id).text(entry.text));
                    });
                    options.prop('disabled', false)
                },
                error: function (err, result) {
                    alert("Error in assigning dataToSave" + err.responseText);
                }
            });
        });

        //load matching venues on button click
        $("#btnSubmit").click(function () {

            var check = $("#details").valid();
            if (check) {
                $('#possibleTrainers').empty();
                $("#additionalDetails").empty();
                var characteristicsList = [];

                //get selected characteristics
                $('input:checkbox.Characteristic_ID').each(function () {
                    var sThisVal = (this.checked ? $(this).val() : "");
                    if (sThisVal > 0) {
                        characteristicsList.push(sThisVal);
                    };
                });

                //get model details
                var model = {
                    Category_ID: $("#categorySelect").val(),
                    Topic_ID: $("#topicSelect").val(),
                    duration: $("#durationSelect").val(),
                    startDate: $("#datepicker").val(),
                    Campus_ID: $("#campusSelect").val(),
                };

                //clear the session details div
                $("#sessiondetails").empty();

                $.ajax({
                    type: 'GET',
                    url: '/Trainer/getTrainingVenues',
                    contentType: 'application/json; charset=utf-8',
                    data: {
                        model: JSON.stringify(model),
                        characteristics: JSON.stringify(characteristicsList)
                    },
                    success: function (result) {

                        //display the available venues from a partial
                        $('#availableVenues').replaceWith(result);

                        //toggle the session details section
                        $("#toggleMain").hide(800);
                        $("#detailsTop span").removeClass("glyphicon glyphicon-triangle-bottom");
                        $("#detailsTop span").addClass("glyphicon glyphicon-triangle-right");

                        //disable the proceed button
                        $("#btnProceed").attr('disabled', 'disabled');

                        //toggle details when clicked
                        $("#venueDetails").click(function () {
                            $("#toggleVenue").toggle(800);
                            if ($("#venueDetails span").hasClass("glyphicon glyphicon-triangle-right")) {
                                $("#venueDetails span").removeClass("glyphicon glyphicon-triangle-right");
                                $("#venueDetails span").addClass("glyphicon glyphicon-triangle-bottom");
                            } else {
                                $("#venueDetails span").removeClass("glyphicon glyphicon-triangle-bottom");
                                $("#venueDetails span").addClass("glyphicon glyphicon-triangle-right");
                            }
                        });

                        //call function on button proceed click
                        $("#btnProceed").click(function () {
                            $('#possibleTrainers').empty();
                            $("#additionalDetails").empty();
                            $.ajax({
                                type: 'GET',
                                url: '/Trainer/addTrainingSessionDetails',
                                success: function (result) {

                                    //display the available venues from a partial
                                    $('#sessiondetails').replaceWith(result);
                                    $("#toggleVenue").toggle(800);
                                    $("#venueDetails span").removeClass("glyphicon glyphicon-triangle-bottom");
                                    $("#venueDetails span").addClass("glyphicon glyphicon-triangle-right");
                                    $("#btnTimeslotProceed").attr('disabled', 'disabled');
                                },
                                error: function (err, result) {
                                    alert("Error in assigning dataToSave" + err.responseText);
                                }
                            });
                        })
                    },
                    error: function (err, result) {
                        alert("Error in assigning dataToSave" + err.responseText);
                    }
                });
            }

        });

    })
</script>